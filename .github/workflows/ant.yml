name: Build Java Project Remotely

on:
  push:
    branches:
      - main  # Trigger on push to the main branch

jobs:
  build:
    runs-on: ubuntu-latest  # GitHub-hosted runner

    steps:
    # Step 1: Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Install required dependencies (scp, sshpass, ant)
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y scp sshpass ant

    # Step 3: Sync project files to the remote server using SCP
    - name: Sync project files to remote server
      run: |
        sshpass -p ${{ secrets.REMOTE_PASSWORD }} scp -r ./ ${REMOTE_USER}@${REMOTE_HOST}:/var/tmp/BillPayment/
      env:
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}  # Remote host (IP or domain)
        REMOTE_USER: ${{ secrets.REMOTE_USER }}  # Remote username
        REMOTE_PASSWORD: ${{ secrets.REMOTE_PASSWORD }}  # Remote password

    # Step 4: Run Ant build remotely on the remote server
    - name: Run Ant build on remote server
      run: |
        sshpass -p ${{ secrets.REMOTE_PASSWORD }} ssh -o StrictHostKeyChecking=no ${REMOTE_USER}@${REMOTE_HOST} << 'EOF'
          # Change to the project directory
          cd /var/tmp/BillPayment/

          # Source the MQSI profile (required for IBM MQ / App Connect)
          source /opt/ibm/mqsi/ace-12.0.3.0/server/bin/mqsiprofile
          echo "mqsiprofile has been executed."

          # Run Ant build command (using the provided build.xml)
          echo "Running build.xml"
          ant -noinput -buildfile BillPayment/build.xml

          # Optionally, print the result or logs after the build
          echo "Build completed!"
        EOF
      env:
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}  # Remote host (IP or domain)
        REMOTE_USER: ${{ secrets.REMOTE_USER }}  # Remote username
        REMOTE_PASSWORD: ${{ secrets.REMOTE_PASSWORD }}  # Remote password
